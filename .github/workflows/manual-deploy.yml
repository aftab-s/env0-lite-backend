name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DOCKER_IMAGE: thebagelproject/bagel-backend
  NODE_VERSION: '20'
  APP_PORT: '5000'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=raw,value=${{ github.event.inputs.version }}
          type=raw,value=${{ github.event.inputs.environment }}-latest
          type=raw,value=latest,enable=${{ github.event.inputs.environment == 'production' }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Create Git Tag
      if: github.event.inputs.environment == 'production'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
        git push origin ${{ github.event.inputs.version }}

    - name: Create GitHub Release
      if: github.event.inputs.environment == 'production'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: Release ${{ github.event.inputs.version }}
        draft: false
        prerelease: false
        body: |
          ## Changes
          - Docker image: `${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.version }}`
          - Environment: ${{ github.event.inputs.environment }}
          
          ## Docker Pull Command
          ```bash
          docker pull ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.version }}
          ```
